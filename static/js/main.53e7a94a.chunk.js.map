{"version":3,"sources":["components/CellComponent.jsx","components/InlineRow.jsx","components/OffsetRow.jsx","components/BeadGrid.jsx","components/ColorToolSection.jsx","App.js","index.js"],"names":["Cell","styled","div","CellComponent","props","React","useState","filled","setFilled","activeColor","id","cell","onClick","event","target","style","backgroundColor","colorPalette","key","Row","InlineRow","cells","i","push","OffRow","OffsetRow","BigBox","Divider","BeadGrid","topRows","bottomRows","row","ColorContainer","ColorPicker","input","ColorPaletteContainer","ColorPaletteItem","button","inputColor","ColorText","p","Button","ColorToolSection","type","name","onChange","handleColorChange","value","currentColor","handleColorPaletteChange","handleDonePickingFormat","map","el","textDeco","handleActiveColorChange","indexOf","textDecoration","App","color","setColor","activeColorIndex","setActiveColorIndex","setColorPalette","donePickingFormat","setDonePickingFormat","className","index","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53e7a94a.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Cell = styled.div`\n  cursor: crosshair;\n  width: 14px; //total width of 15px\n  height: 14px; //total height of 15px\n  border: solid 0.5px grey;\n  display: inline-block;\n  margin-top: 0;\n  padding: 0;\n`;\n\nexport const CellComponent = (props) => {\n  const [filled, setFilled] = React.useState(true);\n  const activeColor = props.activeColor;\n  const handleClick = (event) => {\n    setFilled((filled) => !filled);\n    if (filled === false) {\n      event.target.style.backgroundColor = \"white\";\n    } else {\n      event.target.style.backgroundColor = props.colorPalette[activeColor];\n    }\n  };\n\n  return (\n    <div>\n      <Cell key={props.key} id={props.cell} onClick={handleClick} />\n    </div>\n  );\n};\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\n\nimport { CellComponent } from \"./CellComponent\";\n\nconst Row = styled.div`\n  display: flex;\n  padding: 0;\n  margin-bottom: -4px;\n`;\n\nexport const InlineRow = (props) => {\n  //inline rows line up to form solid columns\n  //not sure I need a seperate cell component\n  //Key is there...maybe dont need\n\n  let cells = [];\n  for (let i = 0; i < 40; i++) {\n    cells.push(\n      <CellComponent\n        key={i}\n        id={i}\n        activeColor={props.activeColor}\n        colorPalette={props.colorPalette}\n      />\n    );\n  }\n\n  //using Fragment for styling..gets janky without it.\n  return (\n    <Fragment>\n      <Row>{cells}</Row>\n    </Fragment>\n  );\n};\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\n\nimport { CellComponent } from \"./CellComponent\";\n\nconst OffRow = styled.div`\n  display: flex;\n  position: relative;\n  right: 7px;\n  padding: 0;\n  margin-bottom: -4px;\n`;\n\nexport const OffsetRow = (props) => {\n  let cells = [];\n  for (let i = 0; i < 41; i++) {\n    cells.push(\n      <CellComponent\n        key={i}\n        id={i}\n        activeColor={props.activeColor}\n        colorPalette={props.colorPalette}\n      />\n    );\n  }\n  return (\n    <Fragment>\n      <OffRow>{cells}</OffRow>\n    </Fragment>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { InlineRow } from \"./InlineRow\";\nimport { OffsetRow } from \"./OffsetRow\";\n\nconst BigBox = styled.div`\n  margin-right: 50px;\n  padding: 0;\n  width: 600px;\n  height: 2100px;\n  border: 10px solid black;\n  position: absolute;\n  left: 400px;\n  z-index: 100000;\n`;\nconst Divider = styled.div`\n  width: 100%;\n  height: 2px;\n  background-color: black;\n`;\n\nexport const BeadGrid = (props) => {\n  //rows must shift of offset to inline after 40 rows for earring design\n  const topRows = [];\n  const bottomRows = [];\n  //loop to render 40 rows alternating inline & offset\n  for (let i = 0; i < 40; i++) {\n    //FIXME: CHANGE THESE NUMBERS!\n    i % 2 === 0\n      ? topRows.push(\n          <InlineRow\n            row={i}\n            colorPalette={props.colorPalette}\n            activeColor={props.activeColor}\n          />\n        )\n      : topRows.push(\n          <OffsetRow\n            row={i}\n            colorPalette={props.colorPalette}\n            activeColor={props.activeColor}\n          />\n        );\n  }\n  //renders the next 100 rows inline\n  for (let i = 0; i < 100; i++) {\n    bottomRows.push(\n      <InlineRow\n        row={i}\n        activeColor={props.activeColor}\n        colorPalette={props.colorPalette}\n      />\n    );\n  }\n  return (\n    <div>\n      <BigBox>\n        {topRows}\n        <Divider />\n        {bottomRows}\n      </BigBox>\n    </div>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ColorContainer = styled.div`\n  position: fixed;\n  left: 30px;\n  top: 100px;\n`;\n\nconst ColorPicker = styled.input`\n  width: 200px;\n  height: 100px;\n`;\nconst ColorPaletteContainer = styled.div`\n  width: 200px;\n  height: 500px;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: flex-start;\n  align-items: center;\n`;\nconst ColorPaletteItem = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100px;\n  margin-top: 10px;\n  font-size: 23px;\n  background-color: ${(props) => props.inputColor};\n  cursor: pointer;\n  border: none;\n`;\nconst ColorText = styled.p`\n  font-size: 20px;\n  margin-top: -2px;\n  margin-bottom: 0;\n`;\n\nconst Button = styled.button`\n  width: 200px;\n  color: #eee;\n  font-size: 20px;\n  padding: 5px;\n  border: none;\n  background-color: #414a4c;\n  cursor: pointer;\n  display: block;\n  margin-top: 5px;\n  &:hover {\n    background-color: #3a4244;\n  }\n`;\n\nexport const ColorToolSection = (props) => {\n  return (\n    <ColorContainer>\n      <ColorPicker\n        type=\"color\"\n        name=\"colorTool\"\n        id=\"colorTool\"\n        onChange={props.handleColorChange}\n        value={props.currentColor}\n      />\n      <Button onClick={props.handleColorPaletteChange}>Add Color!</Button>\n      <Button onClick={props.handleDonePickingFormat}>Done </Button>\n      <ColorPaletteContainer>\n        {props.colorPalette.map((el) => {\n          let textDeco =\n            props.colorPalette[props.activeColor] === el ? \"underline\" : \"\";\n          return (\n            <>\n              <ColorPaletteItem\n                onClick={() =>\n                  props.handleActiveColorChange(props.colorPalette.indexOf(el))\n                }\n                inputColor={el}\n                style={{ textDecoration: textDeco }}\n              ></ColorPaletteItem>\n              <ColorText style={{ textDecoration: textDeco }}>{el}</ColorText>\n            </>\n          );\n        })}\n      </ColorPaletteContainer>\n    </ColorContainer>\n  );\n};\n","import React from \"react\";\n\nimport { BeadGrid } from \"./components/BeadGrid\";\nimport { ColorToolSection } from \"./components/ColorToolSection\";\n\nconst App = () => {\n  //current color in the color picker tool\n  const [color, setColor] = React.useState(\"#16394f\");\n  //active color to fill cells\n  const [activeColorIndex, setActiveColorIndex] = React.useState(0);\n  //color palatte to reduce re-renders?\n  const [colorPalette, setColorPalette] = React.useState([]);\n  //Will eventually be used to pick bead grid layout and set palatte\n  const [donePickingFormat, setDonePickingFormat] = React.useState(false);\n\n  //Find a way to determine bead grid from here.\n  //40 rows of offset columns\n  //top rows = [ [], [],[]] //Each nested array is a row, each nested array contains 40 or 41 cells\n  //loop so that\n\n  const handleColorChange = (event) => {\n    setColor(event.target.value);\n  };\n  const handleColorPaletteChange = () => {\n    if (colorPalette.indexOf(color) > 0) {\n      return;\n    }\n    setColorPalette((colorPalette) => [...colorPalette, color]);\n  };\n  const handleActiveColorChange = (index) => {\n    //sets active color to the index in the color palatte of the clicked color div\n    console.log(index);\n    setActiveColorIndex(index);\n  };\n  const handleDonePickingFormat = () => {\n    setDonePickingFormat(!donePickingFormat);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Maple's Maker Corner</h1>\n      </header>\n      {/* If donePickingFormat is true, render the beadGrid */}\n      {donePickingFormat && (\n        <BeadGrid colorPalette={colorPalette} activeColor={activeColorIndex} />\n      )}\n      <ColorToolSection\n        handleColorChange={handleColorChange}\n        handleActiveColorChange={handleActiveColorChange}\n        colorPalette={colorPalette}\n        activeColor={activeColorIndex}\n        currentColor={color}\n        handleDonePickingFormat={handleDonePickingFormat}\n        handleColorPaletteChange={handleColorPaletteChange}\n      ></ColorToolSection>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}